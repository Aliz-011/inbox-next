// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id          String    @id @default(uuid())
  name        String    @db.Text
  email       String    @unique
  password    String    @db.Text
  dateOfBirth DateTime?
  photoUrl    String?   @db.Text
  phone       String?
  address     String?   @db.Text

  sentMails     Mail[]     @relation("Sender")
  receivedMails Mail[]     @relation("Recipient")
  documents     Document[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mail {
  id         String  @id @default(uuid())
  title      String
  content    String? @db.Text
  mailCode   String? @unique @db.Text
  isRead     Boolean @default(false)
  isDrafted  Boolean @default(false)
  isDeleted  Boolean @default(false)
  isArchived Boolean @default(false)
  attachment String? @db.Text

  senderId    String
  sender      User   @relation(name: "Sender", fields: [senderId], references: [id])
  recipientId String
  recipient   User   @relation(name: "Recipient", fields: [recipientId], references: [id])

  labels    Label[]
  timelines MailTimeline[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId])
  @@index([recipientId])
}

model Timeline {
  id     String         @id @default(uuid())
  status String?
  mails  MailTimeline[]
}

model MailTimeline {
  mailId     String
  mail       Mail     @relation(fields: [mailId], references: [id], onDelete: Cascade)
  timelineId String
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)

  assignedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([mailId, timelineId])
}

model Label {
  id   String @id @default(uuid())
  name String @unique

  mails Mail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id          String  @id @default(uuid())
  title       String
  content     String? @db.Text
  isPublished Boolean @default(false)
  imageUrl    String?

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
